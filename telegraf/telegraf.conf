[global_tags]
  # dc = "us-east-1" # will tag all metrics with dc=us-east-1
  # rack = "1a"
  ## Environment variables can be used as tags, and throughout the config file
  # user = "$USER"
[agent]
  ## Default data collection interval for all inputs
  interval = "10s"
  ## Rounds collection interval to 'interval'
  ## ie, if interval="10s" then always collect on :00, :10, :20, etc.
  round_interval = true
  ## Telegraf will send metrics to outputs in batches of at most
  ## metric_batch_size metrics.
  ## This controls the size of writes that Telegraf sends to output plugins.
  metric_batch_size = 1000
  ## Maximum number of unwritten metrics per output.
  metric_buffer_limit = 10000
  ## Collection jitter is used to jitter the collection by a random amount.
  ## Each plugin will sleep for a random time within jitter before collecting.
  ## This can be used to avoid many plugins querying things like sysfs at the
  ## same time, which can have a measurable effect on the system.
  collection_jitter = "0s"
  ## Default flushing interval for all outputs. Maximum flush_interval will be
  ## flush_interval + flush_jitter
  flush_interval = "10s"
  ## Jitter the flush interval by a random amount. This is primarily to avoid
  ## large write spikes for users running a large number of telegraf instances.
  ## ie, a jitter of 5s and interval 10s means flushes will happen every 10-15s
  flush_jitter = "0s"
  ## By default or when set to "0s", precision will be set to the same
  ## timestamp order as the collection interval, with the maximum being 1s.
  ##   ie, when interval = "10s", precision will be "1s"
  ##       when interval = "250ms", precision will be "1ms"
  ## Precision will NOT be used for service inputs. It is up to each individual
  ## service input to set the timestamp at the appropriate precision.
  ## Valid time units are "ns", "us" (or "Âµs"), "ms", "s".
  precision = ""
  ## Log at debug level.
  # debug = false
  ## Log only error level messages.
  # quiet = false
  ## Log file name, the empty string means to log to stderr.
  # logfile = ""
  ## The logfile will be rotated after the time interval specified.  When set
  ## to 0 no time based rotation is performed.
  # logfile_rotation_interval = "0d"
  ## The logfile will be rotated when it becomes larger than the specified
  ## size.  When set to 0 no size based rotation is performed.
  # logfile_rotation_max_size = "0MB"
  ## Maximum number of rotated archives to keep, any older logs are deleted.
  ## If set to -1, no archives are removed.
  # logfile_rotation_max_archives = 5
  ## Override default hostname, if empty use os.Hostname()
  hostname = ""
  ## If set to true, do no set the "host" tag in the telegraf agent.
  omit_hostname = false
  # [[outputs.influxdb]]
  ## The full HTTP or UDP URL for your InfluxDB instance.
  ##
  ## Multiple URLs can be specified for a single cluster, only ONE of the
  ## urls will be written to each interval.
  # urls = ["unix:///var/run/influxdb.sock"]
  # urls = ["udp://127.0.0.1:8089"]
  # urls = ["http://influxdb:8086"]
  ## The target database for metrics; will be created as needed.
  ## For UDP url endpoint database needs to be configured on server side.
  # database = "telegraf"
  ## The value of this tag will be used to determine the database.  If this
  ## tag is not set the 'database' option is used as the default.
  # database_tag = ""
  ## If true, no CREATE DATABASE queries will be sent.  Set to true when using
  ## Telegraf with a user without permissions to create databases or when the
  ## database already exists.
  # skip_database_creation = false
  ## Name of existing retention policy to write to.  Empty string writes to
  ## the default retention policy.  Only takes effect when using HTTP.
  # retention_policy = ""
  ## Write consistency (clusters only), can be: "any", "one", "quorum", "all".
  ## Only takes effect when using HTTP.
  # write_consistency = "any"
  ## Timeout for HTTP messages.
  # timeout = "5s"
  ## HTTP Basic Auth
  # username = "admin"
  # password = "admin"
  ## HTTP User-Agent
  # user_agent = "telegraf"
  ## UDP payload size is the maximum packet size to send.
  # udp_payload = "512B"
  ## Optional TLS Config for use on HTTP connections.
  # tls_ca = "/etc/telegraf/ca.pem"
  # tls_cert = "/etc/telegraf/cert.pem"
  # tls_key = "/etc/telegraf/key.pem"
  ## Use TLS but skip chain & host verification
  # insecure_skip_verify = false
  ## HTTP Proxy override, if unset values the standard proxy environment
  ## variables are consulted to determine which proxy, if any, should be used.
  # http_proxy = "http://corporate.proxy:3128"
  ## Additional HTTP headers
  # http_headers = {"X-Special-Header" = "Special-Value"}
  ## HTTP Content-Encoding for write request body, can be set to "gzip" to
  ## compress body or "identity" to apply no encoding.
  # content_encoding = "identity"
  ## When true, Telegraf will output unsigned integers as unsigned values,
  ## i.e.: "42u".  You will need a version of InfluxDB supporting unsigned
  ## integer values.  Enabling this option will result in field type errors if
  ## existing data has been written.
  # influx_uint_support = false
[[outputs.graphite]]
   servers = ["cribl:8125"]
   graphite_tag_support = true
[[inputs.cpu]]
  ## Whether to report per-cpu stats or not
  percpu = true
  ## Whether to report total system cpu stats or not
  totalcpu = true
  ## If true, collect raw CPU time metrics.
  collect_cpu_time = false
  ## If true, compute and report the sum of all non-idle CPU states.
  report_active = false
[[inputs.disk]]
  ## By default stats will be gathered for all mount points.
  ## Set mount_points will restrict the stats to only the specified mount points.
  # mount_points = ["/"]
  ## Ignore mount points by filesystem type.
  ignore_fs = ["tmpfs", "devtmpfs", "devfs", "iso9660", "overlay", "aufs", "squashfs"]
[[inputs.diskio]]
  ## By default, telegraf will gather stats for all devices including
  ## disk partitions.
  ## Setting devices will restrict the stats to the specified devices.
  # devices = ["sda", "sdb", "vd*"]
  ## Uncomment the following line if you need disk serial numbers.
  # skip_serial_number = false
  #
  ## On systems which support it, device metadata can be added in the form of
  ## tags.
  ## Currently only Linux is supported via udev properties. You can view
  ## available properties for a device by running:
  ## 'udevadm info -q property -n /dev/sda'
  ## Note: Most, but not all, udev properties can be accessed this way. Properties
  ## that are currently inaccessible include DEVTYPE, DEVNAME, and DEVPATH.
  # device_tags = ["ID_FS_TYPE", "ID_FS_USAGE"]
  #
  ## Using the same metadata source as device_tags, you can also customize the
  ## name of the device via templates.
  ## The 'name_templates' parameter is a list of templates to try and apply to
  ## the device. The template may contain variables in the form of '$PROPERTY' or
  ## '${PROPERTY}'. The first template which does not contain any variables not
  ## present for the device is used as the device name tag.
  ## The typical use case is for LVM volumes, to get the VG/LV name instead of
  ## the near-meaningless DM-0 name.
  # name_templates = ["$ID_FS_LABEL","$DM_VG_NAME/$DM_LV_NAME"]
[[inputs.kernel]]
  # no configuration
[[inputs.mem]]
  # no configuration
[[inputs.processes]]
  # no configuration
[[inputs.swap]]
  # no configuration
[[inputs.system]]
  ## Uncomment to remove deprecated metrics.
  # fielddrop = ["uptime_format"]
[[inputs.docker]]
   endpoint = "unix:///var/run/docker.sock"

[[outputs.prometheus_client]]
  ## Address to listen on.
  listen = ":9273"

##
## SNMP Input Plugin
##
## QNAP TS-431X
##
[[inputs.snmp]]
   # List of agents to poll
   agents = [ "192.168.1.203" ]
   # Polling interval
   interval = "20s"
   # Timeout for each SNMP query.
   timeout = "10s"
   # Number of retries to attempt within timeout.
   retries = 3
   # The GETBULK max-repetitions parameter
   max_repetitions = 10
   # Measurement name
   name = "snmp.QNAP"

   community = "public"

  ##
  ## System Details & Metrics
  ##
  # CPU
  [[inputs.snmp.field]]
  name = "name"
  oid = "NAS-MIB::enclosureName.1"
  is_tag = true

  [[inputs.snmp.table]]
    name = "snmp.QNAP.cpuTable"
    oid = "NAS-MIB::cpuTable"
    [[inputs.snmp.table.field]]
      name = "cpuIndex"
      oid = "NAS-MIB::cpuIndex"
      is_tag = true
    [[inputs.snmp.table.field]]
      name = "cpuID"
      oid = "NAS-MIB::cpuID"
      is_tag = true
    [[inputs.snmp.table.field]]
      name = "cpuUsage"
      oid = "NAS-MIB::cpuUsage"

  #  System
  #  Enclosures
  [[inputs.snmp.table]]
    name = "snmp.QNAP.systemTable"
  # Memory
  [[inputs.snmp.table.field]]
    name = "systemTotalMemEX"
    oid = "NAS-MIB::systemTotalMemEX"
  [[inputs.snmp.table.field]]
    name = "systemFreeMemEX"
    oid = "NAS-MIB::systemFreeMemEX"
  # System temp
  [[inputs.snmp.table.field]]
    name = "cpu-TemperatureEX"
    oid = "NAS-MIB::cpu-TemperatureEX"
  [[inputs.snmp.table.field]]
    name = "systemTemperatureEX"
    oid = "NAS-MIB::systemTemperatureEX"
  # Uptime
  [[inputs.snmp.field]]
    name = "systemUptime"
    oid = "NAS-MIB::systemUptimeEX"
  # Uptime
  [[inputs.snmp.field]]
    name = "systemCPU-UsageEX"
    oid = "NAS-MIB::systemCPU-UsageEX"

  #  Enclosures
  [[inputs.snmp.table]]
    name = "snmp.QNAP.enclosureTable"
    oid = "NAS-MIB::enclosureTable"
    # Memory
    [[inputs.snmp.table.field]]
      name = "enclosureID"
      oid = "NAS-MIB::enclosureID"
      is_tag = true
    [[inputs.snmp.table.field]]
      name = "enclosureModel"
      oid = "NAS-MIB::enclosureModel"
      is_tag = true
    [[inputs.snmp.table.field]]
      name = "enclosureName"
      oid = "NAS-MIB::enclosureName"
      is_tag = true
    [[inputs.snmp.table.field]]
      name = "enclosureSystemTemp"
      oid = "NAS-MIB::enclosureSystemTemp"

  #  Fan
  [[inputs.snmp.table]]
    name = "snmp.QNAP.systemFanTableEx"
    oid = "NAS-MIB::systemFanTableEx"
    [[inputs.snmp.table.field]]
      name = "sysFanIndexEX"
      oid = "NAS-MIB::sysFanIndexEX"
      is_tag = true
    [[inputs.snmp.table.field]]
      name = "sysFanDescrEX"
      oid = "NAS-MIB::sysFanDescrEX"
      is_tag = true
    [[inputs.snmp.table.field]]
      name = "sysFanSpeedEX"
      oid = "NAS-MIB::sysFanSpeedEX"

  #  Power
  [[inputs.snmp.table]]
    name = "snmp.QNAP.systemPowerTable"
    oid = "NAS-MIB::systemPowerTable"
    [[inputs.snmp.table.field]]
      name = "systemPowerIndex"
      oid = "NAS-MIB::systemPowerIndex"
      is_tag = true
    [[inputs.snmp.table.field]]
      name = "systemPowerID"
      oid = "NAS-MIB::systemPowerID"
      is_tag = true
    [[inputs.snmp.table.field]]
      name = "systemPowerEnclosureID"
      oid = "NAS-MIB::systemPowerEnclosureID"
      is_tag = true
    [[inputs.snmp.table.field]]
      name = "systemPowerStatus"
      oid = "NAS-MIB::systemPowerStatus"
    [[inputs.snmp.table.field]]
      name = "systemPowerFanSpeed"
      oid = "NAS-MIB::systemPowerFanSpeed"
    [[inputs.snmp.table.field]]
      name = "systemPowerFanSpeed"
      oid = "NAS-MIB::systemPowerFanSpeed"
    [[inputs.snmp.table.field]]
      name = "systemPowerTemp"
      oid = "NAS-MIB::systemPowerTemp"

  #  Interfaces
  [[inputs.snmp.table]]
    name = "snmp.QNAP.systemIfTableEx"
    oid = "NAS-MIB::systemIfTableEx"
    [[inputs.snmp.table.field]]
      name = "ifIndexEX"
      oid = "NAS-MIB::ifIndexEX"
      is_tag = true
    [[inputs.snmp.table.field]]
      name = "ifDescrEX"
      oid = "NAS-MIB::ifDescrEX"
      is_tag = true
    [[inputs.snmp.table.field]]
      name = "ifPacketsReceivedEX"
      oid = "NAS-MIB::ifPacketsReceivedEX"
    [[inputs.snmp.table.field]]
      name = "ifPacketsSentEX"
      oid = "NAS-MIB::ifPacketsSentEX"
    [[inputs.snmp.table.field]]
      name = "ifErrorPacketsEX"
      oid = "NAS-MIB::ifErrorPacketsEX"

  #  Interfaces
  [[inputs.snmp.table]]
    name = "snmp.QNAP.ifXTable"
    oid = "IF-MIB::ifXTable"
    [[inputs.snmp.table.field]]
      name = "ifName"
      oid = "IF-MIB::ifName"
      is_tag = true
    [[inputs.snmp.table.field]]
      name = "ifHCInOctets"
      oid = "IF-MIB::ifHCInOctets"
    [[inputs.snmp.table.field]]
      name = "ifHCOutOctets"
      oid = "IF-MIB::ifHCOutOctets"

  ##
  ## Disk Details & Metrics
  ##
  #  Disk
  [[inputs.snmp.table]]
    name = "snmp.QNAP.diskTable"
    oid = "NAS-MIB::diskTable"
    [[inputs.snmp.table.field]]
      name = "diskIndex"
      oid = "NAS-MIB::diskIndex"
      is_tag = true
    [[inputs.snmp.table.field]]
      name = "diskID"
      oid = "NAS-MIB::diskID"
      is_tag = true
    [[inputs.snmp.table.field]]
      name = "diskEnclosureID"
      oid = "NAS-MIB::diskEnclosureID"
      is_tag = true
    [[inputs.snmp.table.field]]
      name = "diskSummary"
      oid = "NAS-MIB::diskSummary"
    [[inputs.snmp.table.field]]
      name = "diskTemperture"
      oid = "NAS-MIB::diskTemperture"
    [[inputs.snmp.table.field]]
      name = "diskSmartInfo"
      oid = "NAS-MIB::diskSmartInfo"
    [[inputs.snmp.table.field]]
      name = "diskGlobalSpare"
      oid = "NAS-MIB::diskGlobalSpare"
    [[inputs.snmp.table.field]]
      name = "diskModel"
      oid = "NAS-MIB::diskModel"
      is_tag = true
    [[inputs.snmp.table.field]]
      name = "diskCapacity"
      oid = "NAS-MIB::diskCapacity"
      is_tag = true

  ##
  ## Volume Details & Metrics
  ##
  #  Volumes
  [[inputs.snmp.table]]
    name = "snmp.QNAP.systemVolumeTableEx"
    oid = "NAS-MIB::systemVolumeTableEx"
    [[inputs.snmp.table.field]]
      name = "sysVolumeIndexEX"
      oid = "NAS-MIB::sysVolumeIndexEX"
      is_tag = true
    [[inputs.snmp.table.field]]
      name = "sysVolumeDescrEX"
      oid = "NAS-MIB::sysVolumeDescrEX"
      is_tag = true
    [[inputs.snmp.table.field]]
      name = "sysVolumeFSEX"
      oid = "NAS-MIB::sysVolumeFSEX"
      is_tag = true
    [[inputs.snmp.table.field]]
      name = "sysVolumeTotalSizeEX"
      oid = "NAS-MIB::sysVolumeTotalSize"
    [[inputs.snmp.table.field]]
      name = "sysVolumeFreeSize"
      oid = "NAS-MIB::sysVolumeFreeSizeEX"
    [[inputs.snmp.table.field]]
      name = "sysVolumeStatus"
      oid = "NAS-MIB::sysVolumeStatusEX"

  ##
  ## Disk Performance Details & Metrics
  ##
  #  Disk Performance
  [[inputs.snmp.table]]
    name = "snmp.QNAP.diskPerformanceTable"
    oid = "NAS-MIB::diskPerformanceTable"
    [[inputs.snmp.table.field]]
      name = "diskPerformanceIndex"
      oid = "NAS-MIB::diskPerformanceIndex"
      is_tag = true
    [[inputs.snmp.table.field]]
      name = "blvID"
      oid = "NAS-MIB::blvID"
      is_tag = true
    [[inputs.snmp.table.field]]
      name = "iops"
      oid = "NAS-MIB::iops"
    [[inputs.snmp.table.field]]
      name = "latency"
      oid = "NAS-MIB::latency"

  #  JBOD
  [[inputs.snmp.table]]
    name = "snmp.QNAP.jBODHdTable1"
    oid = "NAS-MIB::jBODHdTable1"
    [[inputs.snmp.table.field]]
      name = "jBODHdIndex1"
      oid = "NAS-MIB::jBODHdIndex1"
      is_tag = true
    [[inputs.snmp.table.field]]
      name = "jBODHdDescr1"
      oid = "NAS-MIB::jBODHdDescr1"
      is_tag = true
    [[inputs.snmp.table.field]]
      name = "jBODHdTemperature1"
      oid = "NAS-MIB::sysVolumeFSEX"
    [[inputs.snmp.table.field]]
      name = "jBODHdStatus1"
      oid = "NAS-MIB::jBODHdStatus1"
    [[inputs.snmp.table.field]]
      name = "jBODHdModel1"
      oid = "NAS-MIB::jBODHdModel1"
      is_tag = true
    [[inputs.snmp.table.field]]
      name = "jBODHdCapacity1 "
      oid = "NAS-MIB::jBODHdCapacity1"
    [[inputs.snmp.table.field]]
      name = "jBODHdSmartInfo1"
      oid = "NAS-MIB::jBODHdSmartInfo1"